//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParkinglotOnline.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ParkingLotOnlineEntities : DbContext
    {
        public ParkingLotOnlineEntities()
            : base("name=ParkingLotOnlineEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<BookingLot> BookingLots { get; set; }
        public virtual DbSet<BookingLotDetail> BookingLotDetails { get; set; }
        public virtual DbSet<BookingStatu> BookingStatus { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<County> Counties { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<Finance> Finances { get; set; }
        public virtual DbSet<Host> Hosts { get; set; }
        public virtual DbSet<Lot> Lots { get; set; }
        public virtual DbSet<LotHost> LotHosts { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual int Sp_Admin_Host_AcceptRequest(string loHID)
        {
            var loHIDParameter = loHID != null ?
                new ObjectParameter("LoHID", loHID) :
                new ObjectParameter("LoHID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Admin_Host_AcceptRequest", loHIDParameter);
        }
    
        public virtual int Sp_Admin_Host_CancelRequest(string loHID)
        {
            var loHIDParameter = loHID != null ?
                new ObjectParameter("LoHID", loHID) :
                new ObjectParameter("LoHID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Admin_Host_CancelRequest", loHIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Admin_Host_CountNotific()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Admin_Host_CountNotific");
        }
    
        public virtual ObjectResult<Sp_Admin_Host_Detail_Result> Sp_Admin_Host_Detail(string hostID)
        {
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Admin_Host_Detail_Result>("Sp_Admin_Host_Detail", hostIDParameter);
        }
    
        public virtual ObjectResult<Sp_Admin_Host_Request_Result> Sp_Admin_Host_Request()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Admin_Host_Request_Result>("Sp_Admin_Host_Request");
        }
    
        public virtual ObjectResult<Sp_Admin_ListHost_Result> Sp_Admin_ListHost()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Admin_ListHost_Result>("Sp_Admin_ListHost");
        }
    
        public virtual ObjectResult<Sp_Admin_ListLotHot_Result> Sp_Admin_ListLotHot(string hostID)
        {
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Admin_ListLotHot_Result>("Sp_Admin_ListLotHot", hostIDParameter);
        }
    
        public virtual ObjectResult<string> Sp_Admin_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_Admin_Login", userNameParameter, passwordParameter);
        }
    
        public virtual int Sp_Admin_LotHot_UpdateLoHID(string lotID, string loHID)
        {
            var lotIDParameter = lotID != null ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(string));
    
            var loHIDParameter = loHID != null ?
                new ObjectParameter("LoHID", loHID) :
                new ObjectParameter("LoHID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Admin_LotHot_UpdateLoHID", lotIDParameter, loHIDParameter);
        }
    
        public virtual int Sp_BookingDetail_Cancel(Nullable<int> bookingID, string loHID, string hostID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            var loHIDParameter = loHID != null ?
                new ObjectParameter("LoHID", loHID) :
                new ObjectParameter("LoHID", typeof(string));
    
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_BookingDetail_Cancel", bookingIDParameter, loHIDParameter, hostIDParameter);
        }
    
        public virtual ObjectResult<Sp_BookingLot_ByYearAndMonth_Result> Sp_BookingLot_ByYearAndMonth(Nullable<int> month, Nullable<int> year, string hostID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BookingLot_ByYearAndMonth_Result>("Sp_BookingLot_ByYearAndMonth", monthParameter, yearParameter, hostIDParameter);
        }
    
        public virtual ObjectResult<Sp_BookingLot_Current_Result> Sp_BookingLot_Current(string hostID)
        {
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BookingLot_Current_Result>("Sp_BookingLot_Current", hostIDParameter);
        }
    
        public virtual ObjectResult<Sp_BookingLot_InfoEachLot_Result> Sp_BookingLot_InfoEachLot(Nullable<int> month, Nullable<int> year, string hostID, Nullable<int> bookingID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BookingLot_InfoEachLot_Result>("Sp_BookingLot_InfoEachLot", monthParameter, yearParameter, hostIDParameter, bookingIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> Sp_BookingLot_SumPrice(Nullable<int> month, Nullable<int> year, string hostID, Nullable<int> bookingID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("Sp_BookingLot_SumPrice", monthParameter, yearParameter, hostIDParameter, bookingIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Count_Parkinglot_unavailable(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Count_Parkinglot_unavailable", iDParameter);
        }
    
        public virtual ObjectResult<string> Sp_Driver_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_Driver_Login", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Sp_DriverBooked_History_Result> Sp_DriverBooked_History(string driverID)
        {
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_DriverBooked_History_Result>("Sp_DriverBooked_History", driverIDParameter);
        }
    
        public virtual ObjectResult<Sp_Host_ListLot_Result> Sp_Host_ListLot(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Host_ListLot_Result>("Sp_Host_ListLot", iDParameter);
        }
    
        public virtual ObjectResult<string> Sp_Host_Login(string iD, string password)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_Host_Login", iDParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> Sp_Income_ByYearAndMonth(Nullable<int> month, Nullable<int> year, string hostID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("Sp_Income_ByYearAndMonth", monthParameter, yearParameter, hostIDParameter);
        }
    
        public virtual ObjectResult<Sp_Infomation_Detail_Result> Sp_Infomation_Detail(string loHID)
        {
            var loHIDParameter = loHID != null ?
                new ObjectParameter("LoHID", loHID) :
                new ObjectParameter("LoHID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Infomation_Detail_Result>("Sp_Infomation_Detail", loHIDParameter);
        }
    
        public virtual ObjectResult<Sp_Lot_All_Result> Sp_Lot_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Lot_All_Result>("Sp_Lot_All");
        }
    
        public virtual ObjectResult<Sp_Lot_ByLoHID_Result> Sp_Lot_ByLoHID(string loHID)
        {
            var loHIDParameter = loHID != null ?
                new ObjectParameter("LoHID", loHID) :
                new ObjectParameter("LoHID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Lot_ByLoHID_Result>("Sp_Lot_ByLoHID", loHIDParameter);
        }
    
        public virtual int Sp_LotHost_Available(string loHID)
        {
            var loHIDParameter = loHID != null ?
                new ObjectParameter("LoHID", loHID) :
                new ObjectParameter("LoHID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LotHost_Available", loHIDParameter);
        }
    
        public virtual int Sp_LotHost_Insert(string loHID, string hostID, string lotID)
        {
            var loHIDParameter = loHID != null ?
                new ObjectParameter("LoHID", loHID) :
                new ObjectParameter("LoHID", typeof(string));
    
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            var lotIDParameter = lotID != null ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LotHost_Insert", loHIDParameter, hostIDParameter, lotIDParameter);
        }
    
        public virtual ObjectResult<Sp_LotHost_Lot_Result> Sp_LotHost_Lot(string hostID)
        {
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LotHost_Lot_Result>("Sp_LotHost_Lot", hostIDParameter);
        }
    
        public virtual ObjectResult<Sp_LotHost_Lot_Driver_Result> Sp_LotHost_Lot_Driver(string hostId, string lotId)
        {
            var hostIdParameter = hostId != null ?
                new ObjectParameter("hostId", hostId) :
                new ObjectParameter("hostId", typeof(string));
    
            var lotIdParameter = lotId != null ?
                new ObjectParameter("lotId", lotId) :
                new ObjectParameter("lotId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LotHost_Lot_Driver_Result>("Sp_LotHost_Lot_Driver", hostIdParameter, lotIdParameter);
        }
    
        public virtual ObjectResult<Sp_LotHost_Lot_Driver_All_Result> Sp_LotHost_Lot_Driver_All(string hostID)
        {
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LotHost_Lot_Driver_All_Result>("Sp_LotHost_Lot_Driver_All", hostIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_LotHot_Count(string hostID)
        {
            var hostIDParameter = hostID != null ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_LotHot_Count", hostIDParameter);
        }
    }
}
